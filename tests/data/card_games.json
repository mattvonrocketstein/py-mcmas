{
  "environment": {
    "obsvars": {
      "win": "boolean"
    },
    "vars": {
      "cards": "{null, ak, aq, ka, kq, qa, qk};"
    },
    "actions": [
      "none"
    ],
    "protocol": {
      "Other": "{none};"
    },
    "evolution": [
      "cards=ak if ( cards=ka and player1.Action = swap );cards=ka if ( cards=ak and player1.Action = swap );",
      "cards=aq if ( cards=qa and player1.Action = swap );",
      "cards=qa if ( cards=aq and player1.Action = swap );",
      "cards=kq if ( cards=qk and player1.Action = swap );",
      "cards=qk if ( cards=kq and player1.Action = swap );",
      "cards=null and win=false if player1.Action = reset;",
      "cards=ak if ( player1.Action =  distribute);",
      "cards=ka if ( player1.Action =  distribute);",
      "cards=aq if ( player1.Action =  distribute);",
      "cards=qa if ( player1.Action =  distribute);",
      "cards=kq if ( player1.Action =  distribute);",
      "cards=qk if ( player1.Action =  distribute);",
      "win=true if ( player1.Action =  check) and (cards=ak or cards=kq or cards=qa);"
    ]
  },
  "agents": {
    "player1": {
      "vars": {
        "step": "{s1, s2, s3, s4}"
      },
      "actions": "{keep, swap, distribute, check, reset};",
      "protocol": [
        "step=s1: {distribute};",
        "step=s2: {keep,swap};",
        "step=s3: {check};",
        "step=s4: {reset};"
      ],
      "evolution": [
        "step=s2 if step=s1;",
        "step=s3 if step=s2;",
        "step=s4 if step=s3;",
        "step=s1 if step=s4 and Environment.win=false;"
      ]
    }
  },
  "evaluation": [
    "p1win if Environment.win=true;"
  ],
  "init_states": [
    "(player1.step=s1) and (Environment.cards=null) and Environment.win=false;"
  ],
  "groups": {
    "g1": [
      "player1"
    ]
  },
  "formulae": [
    "AF(p1win);",
    "<g1>F(p1win);"
  ]
}
